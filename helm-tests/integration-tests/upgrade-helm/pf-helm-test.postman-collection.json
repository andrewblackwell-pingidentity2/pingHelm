{
	"info": {
		"_postman_id": "b734fe15-8ba3-4b4e-b5be-e52157440e8f",
		"name": "pf-helm-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "pingfederate admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _retries = pm.environment.get(\"_retries\");",
							"",
							"// Checks to see if the server actually responded",
							"if (pm.response.code == 200 ) {",
							"    pm.environment.unset(\"_retries\");",
							"    console.log(\"connection successful\");",
							"",
							"    pm.test(\"response is ok\", function(){",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    pm.test(\"response is not empty\", function(){",
							"        pm.response.to.have.body();",
							"    });",
							"} else {",
							"    if (!_retries){",
							"        _retries=10;",
							"    }",
							"    ",
							"    if ( _retries > 0 ) {",
							"        _retries--;",
							"        pm.environment.set(\"_retries\", _retries);",
							"        var timeout=_.random(1000,15000);",
							"        console.log(\"Attempting next connection in \"+timeout+\"ms ...\");",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function() {postman.setNextRequest(request.name);}, timeout);",
							"    } else { ",
							"        postman.setNextRequest(null);",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{PF_ADMIN_PRIVATE_HOSTNAME}}:{{PF_ADMIN_PRIVATE_PORT_HTTPS}}/pingfederate/app",
					"protocol": "https",
					"host": [
						"{{PF_ADMIN_PRIVATE_HOSTNAME}}"
					],
					"port": "{{PF_ADMIN_PRIVATE_PORT_HTTPS}}",
					"path": [
						"pingfederate",
						"app"
					]
				}
			},
			"response": []
		},
		{
			"name": "PF CHECK PingFederate engine honors requests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _retries = pm.environment.get(\"_retries\");",
							"// Checks to see if the server actually responded and is valid JSON",
							"var isResponseBodyJson = false;",
							"try {",
							"  JSON.parse(responseBody);",
							"  isResponseBodyJson = true;",
							"} catch (e) {",
							"  console.log(\"Invalid: \" + responseBody);",
							"  // try again",
							"}",
							"if (pm.response.code == 200 && isResponseBodyJson) {",
							"    pm.environment.unset(\"_retries\");",
							"    console.log(\"connection successful\");",
							"",
							"    pm.test(\"response is ok\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"response is not empty\", function () {",
							"        pm.response.to.have.body();",
							"    });",
							"",
							"    pm.test(\"response is JSON\", function(){",
							"        pm.response.to.be.json;",
							"    });",
							"",
							"    var jsonData = JSON.parse(responseBody);",
							"",
							"    pm.test(\"cpu.load key is present\", function () {",
							"        pm.expect(jsonData.hasOwnProperty(\"cpu.load\")).to.be.true;",
							"    });",
							"",
							"    var schema = pm.response.json();",
							"    var data1 = [true, false];",
							"    var data2 = [true, 123];",
							"",
							"    pm.test('Schema is valid', function() {",
							"    pm.expect(tv4.validate(data1, schema)).to.be.true;",
							"    pm.expect(tv4.validate(data2, schema)).to.be.true;",
							"    });",
							"} else {",
							"    if (!_retries) {",
							"        _retries = 10;",
							"    }",
							"",
							"    if (_retries > 0) {",
							"        _retries--;",
							"        pm.environment.set(\"_retries\", _retries);",
							"        var timeout = _.random(1000, 15000);",
							"        console.log(\"Attempting next connection in \" + timeout + \"ms ...\");",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function () { postman.setNextRequest(request.name); }, timeout);",
							"    } else {",
							"        postman.setNextRequest(null);",
							"    }",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var _host = pm.variables.get(\"pf_engine_hostname\");",
							"var _port = pm.variables.get(\"pf_engine_port\");",
							"console.log(\"Attempting connection to https://\"+_host+\":\" +_port+ \" ...\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{PF_ENGINE_PRIVATE_HOSTNAME}}:{{pf_engine_port}}/pf/heartbeat.ping",
					"protocol": "https",
					"host": [
						"{{PF_ENGINE_PRIVATE_HOSTNAME}}"
					],
					"port": "{{pf_engine_port}}",
					"path": [
						"pf",
						"heartbeat.ping"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "PF_ADMIN_PRIVATE_PORT_HTTPS",
			"value": "9999"
		},
		{
			"key": "pf_engine_port",
			"value": "9031"
		}
	]
}