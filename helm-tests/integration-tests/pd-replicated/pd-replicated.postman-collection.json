{
	"info": {
		"_postman_id": "1305d86d-b7c3-43f0-9779-9c6a6ca12363",
		"name": "pd-replicated",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PD CHECK GET available-state on write node",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _retries = pm.variables.has(\"_retries\") ? pm.variables.get(\"_retries\") : pm.variables.get(\"request_retry_count\");",
							"if (_retries > 0) {",
							"    pm.variables.set(\"_retries\", _retries);",
							"    var _retry_min = pm.variables.get(\"request_retry_delay_min_ms\");",
							"    var _retry_max = pm.variables.get(\"request_retry_delay_max_ms\");",
							"    var _timeout = _.random(_retry_min, _retry_max);",
							"}",
							"",
							"// Checks to see if the server actually responded",
							"if (pm.response.code == 200) {",
							"    pm.variables.unset(\"_retries\");",
							"    console.log(\"connection successful\");",
							"",
							"    var jsonData = JSON.parse(responseBody);",
							"",
							"    pm.test(\"availability-state  key is present\", function () {",
							"        pm.expect(jsonData[\"availability-state\"]).to.exist;",
							"    });",
							"",
							"    if (jsonData[\"availability-state\"] != \"AVAILABLE\"){",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function () { postman.setNextRequest(request.name); }, _timeout);",
							"    } else {",
							"        console.log(\"Server available, proceeding...\");",
							"    }",
							"} else {",
							"    console.log(\". retries: \" + _retries);",
							"    _retries--;",
							"    console.log(\"- retries: \" + _retries);",
							"    pm.variables.set(\"_retries\", _retries);",
							"",
							"    if (_retries > 0) {",
							"        console.log(_retries + \" retries left. Attempting next connection in \" + _timeout + \"ms ...\");",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function () { postman.setNextRequest(request.name); }, _timeout);",
							"    } else {",
							"        console.log(\"Attempts exhausted\");",
							"        postman.setNextRequest(null);",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var _host = pm.variables.get(\"PD_ENGINE_PRIVATE_HOSTNAME\");",
							"var _port = pm.variables.get(\"pd_port_https\");",
							"console.log(\"Attempting connection to https://\" + _host + \":\" + _port + \" ...\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{PD_ENGINE_PRIVATE_HOSTNAME}}-0.{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster:{{pd_port_https}}/available-state",
					"protocol": "https",
					"host": [
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-0",
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"available-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD CHECK GET available-state on read node",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var _retries = pm.variables.has(\"_retries\") ? pm.variables.get(\"_retries\") : pm.variables.get(\"request_retry_count\");",
							"if (_retries > 0) {",
							"    pm.variables.set(\"_retries\", _retries);",
							"    var _retry_min = pm.variables.get(\"request_retry_delay_min_ms\");",
							"    var _retry_max = pm.variables.get(\"request_retry_delay_max_ms\");",
							"    var _timeout = _.random(_retry_min, _retry_max);",
							"}",
							"",
							"// Checks to see if the server actually responded",
							"if (pm.response.code == 200) {",
							"    pm.variables.unset(\"_retries\");",
							"    console.log(\"connection successful\");",
							"",
							"    var jsonData = JSON.parse(responseBody);",
							"",
							"    pm.test(\"availability-state  key is present\", function () {",
							"        pm.expect(jsonData[\"availability-state\"]).to.exist;",
							"    });",
							"",
							"    if (jsonData[\"availability-state\"] != \"AVAILABLE\") {",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function () { postman.setNextRequest(request.name); }, _timeout);",
							"    } else {",
							"        console.log(\"Server available, proceeding...\");",
							"    }",
							"} else {",
							"    console.log(\". retries: \" + _retries);",
							"    _retries--;",
							"    console.log(\"- retries: \" + _retries);",
							"    pm.variables.set(\"_retries\", _retries);",
							"",
							"    if (_retries > 0) {",
							"        console.log(_retries + \" retries left. Attempting next connection in \" + _timeout + \"ms ...\");",
							"        // loop back to this request (request.name) after the timeout elapses",
							"        setTimeout(function () { postman.setNextRequest(request.name); }, _timeout);",
							"    } else {",
							"        console.log(\"Attempts exhausted\");",
							"        postman.setNextRequest(null);",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var _host = pm.variables.get(\"PD_ENGINE_PRIVATE_HOSTNAME\");",
							"var _port = pm.variables.get(\"pd_port_https\");",
							"console.log(\"Attempting connection to https://\" + _host + \":\" + _port + \" ...\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{PD_ENGINE_PRIVATE_HOSTNAME}}-1.{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster:{{pd_port_https}}/available-state",
					"protocol": "https",
					"host": [
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-1",
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"available-state"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get schemas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Schemas key is present\",function(){",
							"    pm.expect(jsonData[\"schemas\"]).to.exist;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{K8S_STATEFUL_SET_SERVICE_NAME}}:{{pd_port_https}}/directory/v1/schemas",
					"protocol": "https",
					"host": [
						"{{K8S_STATEFUL_SET_SERVICE_NAME}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"schemas"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get inetOrgPerson schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Schema key is present\",function(){",
							"    pm.expect(jsonData[\"$schema\"]).to.exist;",
							"});",
							"",
							"pm.test(\"classType key is present\",function(){",
							"    pm.expect(jsonData[\"classType\"]).to.exist;",
							"});",
							"",
							"pm.test(\"classType is structural\",function(){",
							"    pm.expect(jsonData[\"classType\"]).to.be.equal(\"structural\");",
							"});",
							"",
							"pm.test(\"Type key is present\",function(){",
							"    pm.expect(jsonData[\"type\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Type is object\",function(){",
							"    pm.expect(jsonData[\"type\"]).to.be.equal(\"object\");",
							"});",
							"",
							"pm.test(\"properties key is present\",function(){",
							"    pm.expect(jsonData[\"properties\"]).to.exist;",
							"});",
							"",
							"console.log(\"Attributes of the inetOrgPerson class:\");",
							"for ( var key in jsonData[\"properties\"] ) {",
							"    if (jsonData[\"properties\"].hasOwnProperty(key)){",
							"        console.log(\" - \"+key);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{K8S_STATEFUL_SET_SERVICE_NAME}}:{{pd_port_https}}/directory/v1/schemas/inetOrgPerson",
					"protocol": "https",
					"host": [
						"{{K8S_STATEFUL_SET_SERVICE_NAME}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"schemas",
						"inetOrgPerson"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get RootDSE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Vendor string is present\",function(){",
							"    pm.expect(jsonData[\"vendorName\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Vendor string is as expected\",function(){",
							"    pm.expect(jsonData[\"vendorName\"]).to.be.equal(\"Ping Identity Corporation\");",
							"});",
							"",
							"pm.test(\"publicBaseDNs key is present\", function(){",
							"    pm.expect(jsonData[\"publicBaseDNs\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\", function(){",
							"    pm.expect(jsonData[\"publicBaseDNs\"][0]).to.be.equal(\"dc=example,dc=com\");",
							"    pm.environment.set(\"_base_dn\",jsonData[\"publicBaseDNs\"][0]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{K8S_STATEFUL_SET_SERVICE_NAME}}:{{pd_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{K8S_STATEFUL_SET_SERVICE_NAME}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get base",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"_dn string is present\",function(){",
							"    pm.expect(jsonData[\"_dn\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\",function(){",
							"    var base_dn = pm.environment.get(\"pd_base_dn\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{K8S_STATEFUL_SET_SERVICE_NAME}}:{{pd_port_https}}/directory/v1/{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{K8S_STATEFUL_SET_SERVICE_NAME}}"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get people branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code == 200) {",
							"    pm.test(\"response is ok\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"response is not empty\", function () {",
							"        pm.response.to.have.body();",
							"    });",
							"",
							"    pm.test(\"response is JSON\", function () {",
							"        pm.response.to.be.json;",
							"    });",
							"",
							"    var jsonData = JSON.parse(responseBody);",
							"",
							"    pm.test(\"_dn string is present\", function () {",
							"        pm.expect(jsonData[\"_dn\"]).to.exist;",
							"    });",
							"",
							"    pm.test(\"Base DN is as expected\", function () {",
							"        var _base_dn = pm.environment.get(\"_base_dn\");",
							"        var dn = \"ou=people,\" + _base_dn;",
							"        pm.expect(jsonData[\"_dn\"].toLowerCase()).to.be.equal(dn.toLowerCase());",
							"    });",
							"",
							"    postman.setNextRequest(\"PD REST API create user\");",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{PD_ENGINE_PRIVATE_HOSTNAME}}-0.{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster:{{pd_port_https}}/directory/v1/ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-0",
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API create people branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"response is not empty\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"_dn\": \"ou=People,{{_base_dn}}\",\n\t\"objectClass\": [\"organizationalUnit\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{PD_ENGINE_PRIVATE_HOSTNAME}}-0.{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster:{{pd_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-0",
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get people branch on write node",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"_dn string is present\", function () {",
							"    pm.expect(jsonData[\"_dn\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\", function () {",
							"    var _base_dn = pm.environment.get(\"_base_dn\");",
							"    var dn = \"ou=people,\" + _base_dn;",
							"    pm.expect(jsonData[\"_dn\"].toLowerCase()).to.be.equal(dn.toLowerCase());",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{PD_ENGINE_PRIVATE_HOSTNAME}}-0.{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster:{{pd_port_https}}/directory/v1/ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-0",
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get people branch on read node",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function () {",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"_dn string is present\", function () {",
							"    pm.expect(jsonData[\"_dn\"]).to.exist;",
							"});",
							"",
							"pm.test(\"Base DN is as expected\", function () {",
							"    var _base_dn = pm.environment.get(\"_base_dn\");",
							"    var dn = \"ou=people,\" + _base_dn;",
							"    pm.expect(jsonData[\"_dn\"].toLowerCase()).to.be.equal(dn.toLowerCase());",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function () { console.log(\"Delaying request by 3 seconds\"); }, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{PD_ENGINE_PRIVATE_HOSTNAME}}-0.{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster:{{pd_port_https}}/directory/v1/ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-0",
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    // 201 means means the creation worked",
							"    // 409 means the entry already existed",
							"    pm.expect([201,409]).to.include(pm.response.code);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"mail\": [\n        \"{{regular_user}}@example.com\"\n    ],\n    \"sn\": [\n        \"postman\"\n    ],\n    \"cn\": [\n        \"Postman User.0\"\n    ],\n    \"givenName\": [\n        \"user.0\"\n    ],\n    \"userPassword\": [\n    \t\"{{regular_pwd}}\"\n    \t],\n    \"pf-connected-identity\": [\n        \"auth-source=pf-local-identity:user-id=postman.user.0\"\n    ],\n    \"uid\": [\n        \"{{regular_user}}\"\n    ],\n    \"objectClass\": [\n        \"top\",\n        \"person\",\n        \"organizationalPerson\",\n        \"inetOrgPerson\",\n        \"pf-connected-identities\"\n    ],\n    \"_dn\": \"uid={{regular_user}},ou=people,{{_base_dn}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{PD_ENGINE_PRIVATE_HOSTNAME}}-0.{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster:{{pd_port_https}}/directory/v1",
					"protocol": "https",
					"host": [
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-0",
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get user on write node",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{PD_ENGINE_PRIVATE_HOSTNAME}}-1.{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster:1443/directory/v1/uid=postman.user.0,ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-1",
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster"
					],
					"port": "1443",
					"path": [
						"directory",
						"v1",
						"uid=postman.user.0,ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API get user on read node",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"response is not empty\", function(){",
							"    pm.response.to.have.body();",
							"});",
							"",
							"pm.test(\"response is JSON\", function(){",
							"    pm.response.to.be.json;",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function () { console.log(\"Delaying request by 3 seconds\"); }, 3000);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{PD_ENGINE_PRIVATE_HOSTNAME}}-1.{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster:{{pd_port_https}}/directory/v1/uid=postman.user.0,ou=People,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-1",
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"uid=postman.user.0,ou=People,{{_base_dn}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PD REST API delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response is ok\", function(){",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"response is empty\", function(){",
							"    pm.response.to.not.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "https://{{PD_ENGINE_PRIVATE_HOSTNAME}}-0.{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster:{{pd_port_https}}/directory/v1/uid=postman.user.0,ou=people,{{_base_dn}}",
					"protocol": "https",
					"host": [
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-0",
						"{{PD_ENGINE_PRIVATE_HOSTNAME}}-cluster"
					],
					"port": "{{pd_port_https}}",
					"path": [
						"directory",
						"v1",
						"uid=postman.user.0,ou=people,{{_base_dn}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{pd_admin_pwd}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{pd_admin_user}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "request_retry_count",
			"value": "15"
		},
		{
			"key": "request_retry_delay_max_ms",
			"value": "15000"
		},
		{
			"key": "request_retry_delay_min_ms",
			"value": "1000"
		},
		{
			"key": "admin_user",
			"value": "administrator"
		},
		{
			"key": "admin_pwd",
			"value": "2FederateM0re"
		},
		{
			"key": "pd_admin_user",
			"value": "cn={{admin_user}}"
		},
		{
			"key": "pd_admin_pwd",
			"value": "{{admin_pwd}}"
		},
		{
			"key": "pd_hostname",
			"value": "pingdirectory"
		},
		{
			"key": "pd_port_https",
			"value": "1443"
		},
		{
			"key": "pd_port_ldaps",
			"value": "1636"
		},
		{
			"key": "pd_port_ldap",
			"value": "1389"
		},
		{
			"key": "pf_engine_hostname",
			"value": "pingfederate"
		},
		{
			"key": "pf_engine_port",
			"value": "9031"
		},
		{
			"key": "pf_admin_hostname",
			"value": "pingfederate"
		},
		{
			"key": "pf_admin_port",
			"value": "9999"
		},
		{
			"key": "regular_user",
			"value": "postman.user.0"
		},
		{
			"key": "regular_pwd",
			"value": "{{admin_pwd}}"
		},
		{
			"key": "pa_engine_hostname",
			"value": "pingaccess"
		},
		{
			"key": "pa_engine_port",
			"value": "3000"
		},
		{
			"key": "pa_admin_hostname",
			"value": "pingaccess"
		},
		{
			"key": "pa_admin_port",
			"value": "9000"
		},
		{
			"key": "compose_stack",
			"value": "integration_tests"
		},
		{
			"key": "pd_write_port_https",
			"value": "{{pd_port_https}}"
		},
		{
			"key": "pd_read_port_https",
			"value": "{{pd_port_https}}"
		}
	]
}